version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

services:
  tensorflow-serving:
    image: 'tensorflow/serving'
    container_name: tensorflow
    ports:
      - '8500:8500'
      - '8501:8501'
    volumes:
      - '/tmp/model-data:/models'
    entrypoint:
      - '/usr/bin/tf_serving_entrypoint.sh'
      - '--model_config_file=/models/models.config'
      - '--model_config_file_poll_wait_seconds=600'

  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: moon_vision_challenge_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: moon_vision_challenge_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.production/.postgres

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: moon_vision_challenge_production_traefik
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme:z
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      - "0.0.0.0:5555:5555"

  redis:
    image: redis:5.0

  celeryworker:
    <<: *django
    image: moon_vision_challenge_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: moon_vision_challenge_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: moon_vision_challenge_production_flower
    command: /start-flower


